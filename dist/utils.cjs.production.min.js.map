{"version":3,"file":"utils.cjs.production.min.js","sources":["../src/signatures.ts","../src/index.ts"],"sourcesContent":["import { keccak256, defaultAbiCoder, toUtf8Bytes, solidityPack } from 'ethers/lib/utils'\nimport { BigNumberish } from 'ethers'\nimport { ecsign } from 'ethereumjs-util'\n\n// Private keys for hardhat's mnemonic.\nexport const privateKey0 = Buffer.from('59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d', 'hex')\nexport const privateKey1 = Buffer.from('5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a', 'hex')\n\nexport const signPacked = (digest: any, privateKey: any) => {\n  const { v, r, s } = ecsign(Buffer.from(digest.slice(2), 'hex'), privateKey)\n  return '0x' + r.toString('hex') + s.toString('hex') + v.toString(16)\n}\n\nexport const sign = (digest: any, privateKey: any) => {\n  return ecsign(Buffer.from(digest.slice(2), 'hex'), privateKey)\n}\n\nexport const SIGNATURE_TYPEHASH = keccak256(\n  toUtf8Bytes('Signature(address user,address delegate,uint256 nonce,uint256 deadline)')\n)\n\nexport const PERMIT_TYPEHASH = keccak256(\n  toUtf8Bytes('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)')\n)\n\nexport const DAI_TYPEHASH = '0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb'\nexport const CHAI_SEPARATOR = '0x0b50407de9fa158c2cba01a99633329490dfd22989a150c20e8c7b4c1fb0fcc3'\n\n// Returns the EIP712 hash which should be signed by the user\n// in order to make a call to `addDelegateBySignature`\nexport function getSignatureDigest(\n  name: string,\n  address: string,\n  chainId: number,\n  signature: {\n    user: string\n    delegate: string\n  },\n  signatureCount: BigNumberish,\n  deadline: BigNumberish\n) {\n  const DOMAIN_SEPARATOR = getDomainSeparator(name, address, '1', chainId)\n  return keccak256(\n    solidityPack(\n      ['bytes1', 'bytes1', 'bytes32', 'bytes32'],\n      [\n        '0x19',\n        '0x01',\n        DOMAIN_SEPARATOR,\n        keccak256(\n          defaultAbiCoder.encode(\n            ['bytes32', 'address', 'address', 'uint256', 'uint256'],\n            [SIGNATURE_TYPEHASH, signature.user, signature.delegate, signatureCount, deadline]\n          )\n        ),\n      ]\n    )\n  )\n}\n\n// Returns the EIP712 hash which should be signed by the user\n// in order to make a call to `permit`\nexport function getPermitDigest(\n  name: string,\n  address: string,\n  version: string,\n  chainId: number,\n  approve: {\n    owner: string\n    spender: string\n    value: BigNumberish\n  },\n  nonce: BigNumberish,\n  deadline: BigNumberish\n) {\n  const DOMAIN_SEPARATOR = getDomainSeparator(name, address, version, chainId)\n  return keccak256(\n    solidityPack(\n      ['bytes1', 'bytes1', 'bytes32', 'bytes32'],\n      [\n        '0x19',\n        '0x01',\n        DOMAIN_SEPARATOR,\n        keccak256(\n          defaultAbiCoder.encode(\n            ['bytes32', 'address', 'address', 'uint256', 'uint256', 'uint256'],\n            [PERMIT_TYPEHASH, approve.owner, approve.spender, approve.value, nonce, deadline]\n          )\n        ),\n      ]\n    )\n  )\n}\n\nexport function getDaiDigest(\n  name: string,\n  address: string,\n  chainId: number,\n  approve: {\n    owner: string\n    spender: string\n    can: boolean\n  },\n  nonce: BigNumberish,\n  deadline: BigNumberish\n) {\n  const DOMAIN_SEPARATOR = getDomainSeparator(name, address, '1', chainId)\n  return keccak256(\n    solidityPack(\n      ['bytes1', 'bytes1', 'bytes32', 'bytes32'],\n      [\n        '0x19',\n        '0x01',\n        DOMAIN_SEPARATOR,\n        keccak256(\n          defaultAbiCoder.encode(\n            ['bytes32', 'address', 'address', 'uint256', 'uint256', 'bool'],\n            [DAI_TYPEHASH, approve.owner, approve.spender, nonce, deadline, approve.can]\n          )\n        ),\n      ]\n    )\n  )\n}\n\n// Gets the EIP712 domain separator\nexport function getDomainSeparator(name: string, contractAddress: string, version: string, chainId: number) {\n  return keccak256(\n    defaultAbiCoder.encode(\n      ['bytes32', 'bytes32', 'bytes32', 'uint256', 'address'],\n      [\n        keccak256(toUtf8Bytes('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')),\n        keccak256(toUtf8Bytes(name)),\n        keccak256(toUtf8Bytes(version)),\n        chainId,\n        contractAddress,\n      ]\n    )\n  )\n}\n\nexport function getChaiDigest(\n  approve: {\n    owner: string\n    spender: string\n    can: boolean\n  },\n  nonce: BigNumberish,\n  deadline: BigNumberish\n) {\n  return keccak256(\n    solidityPack(\n      ['bytes1', 'bytes1', 'bytes32', 'bytes32'],\n      [\n        '0x19',\n        '0x01',\n        CHAI_SEPARATOR,\n        keccak256(\n          defaultAbiCoder.encode(\n            ['bytes32', 'address', 'address', 'uint256', 'uint256', 'bool'],\n            [DAI_TYPEHASH, approve.owner, approve.spender, nonce, deadline, approve.can]\n          )\n        ),\n      ]\n    )\n  )\n}\n","import { BigNumber, BigNumberish } from \"ethers\"\nimport { keccak256, toUtf8Bytes, parseEther } from 'ethers/lib/utils'\n\n// 10**18 precision\nexport const wad = (value: BigNumberish) => parseEther(value.toString())\n\n// 10**27 precision\nconst rayExp = BigNumber.from(10).pow(27)\nexport const ray = (value: BigNumberish) => BigNumber.from(value).mul(rayExp)\n\n// 10**45 precision\nconst radExp = BigNumber.from(10).pow(45)\nexport const rad = (value: BigNumberish) => BigNumber.from(value).mul(radExp)\n\nexport const id = (signature: string) => {\n  return keccak256(toUtf8Bytes(signature)).slice(0, 10)\n}\n\nexport * as signatures from \"./signatures\""],"names":["privateKey0","Buffer","from","privateKey1","SIGNATURE_TYPEHASH","keccak256","toUtf8Bytes","PERMIT_TYPEHASH","DAI_TYPEHASH","CHAI_SEPARATOR","getDomainSeparator","name","contractAddress","version","chainId","defaultAbiCoder","encode","digest","privateKey","ecsign","slice","v","s","r","toString","address","signature","signatureCount","deadline","DOMAIN_SEPARATOR","solidityPack","user","delegate","approve","nonce","owner","spender","value","can","rayExp","BigNumber","pow","radExp","mul","parseEther"],"mappings":"gGAKaA,EAAcC,OAAOC,KAAK,mEAAoE,OAC9FC,EAAcF,OAAOC,KAAK,mEAAoE,OAW9FE,EAAqBC,YAChCC,cAAY,4EAGDC,EAAkBF,YAC7BC,cAAY,uFAGDE,EAAe,qEACfC,EAAiB,8EAoGdC,EAAmBC,EAAcC,EAAyBC,EAAiBC,UAClFT,YACLU,kBAAgBC,OACd,CAAC,UAAW,UAAW,UAAW,UAAW,WAC7C,CACEX,YAAUC,cAAY,uFACtBD,YAAUC,cAAYK,IACtBN,YAAUC,cAAYO,IACtBC,EACAF,kEA/HkB,SAACK,EAAaC,SAClBC,SAAOlB,OAAOC,KAAKe,EAAOG,MAAM,GAAI,OAAQF,GAAxDG,IAAAA,EAAMC,IAAAA,QACP,OADIC,EACKC,SAAS,OAASF,EAAEE,SAAS,OAASH,EAAEG,SAAS,UAG/C,SAACP,EAAaC,UACzBC,SAAOlB,OAAOC,KAAKe,EAAOG,MAAM,GAAI,OAAQF,uGAiBnDP,EACAc,EACAX,EACAY,EAIAC,EACAC,OAEMC,EAAmBnB,EAAmBC,EAAMc,EAAS,IAAKX,UACzDT,YACLyB,eACE,CAAC,SAAU,SAAU,UAAW,WAChC,CACE,OACA,OACAD,EACAxB,YACEU,kBAAgBC,OACd,CAAC,UAAW,UAAW,UAAW,UAAW,WAC7C,CAACZ,EAAoBsB,EAAUK,KAAML,EAAUM,SAAUL,EAAgBC,kCAWnFjB,EACAc,EACAZ,EACAC,EACAmB,EAKAC,EACAN,OAEMC,EAAmBnB,EAAmBC,EAAMc,EAASZ,EAASC,UAC7DT,YACLyB,eACE,CAAC,SAAU,SAAU,UAAW,WAChC,CACE,OACA,OACAD,EACAxB,YACEU,kBAAgBC,OACd,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WACxD,CAACT,EAAiB0B,EAAQE,MAAOF,EAAQG,QAASH,EAAQI,MAAOH,EAAON,+BASlFjB,EACAc,EACAX,EACAmB,EAKAC,EACAN,OAEMC,EAAmBnB,EAAmBC,EAAMc,EAAS,IAAKX,UACzDT,YACLyB,eACE,CAAC,SAAU,SAAU,UAAW,WAChC,CACE,OACA,OACAD,EACAxB,YACEU,kBAAgBC,OACd,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,QACxD,CAACR,EAAcyB,EAAQE,MAAOF,EAAQG,QAASF,EAAON,EAAUK,EAAQK,uDAyBlFL,EAKAC,EACAN,UAEOvB,YACLyB,eACE,CAAC,SAAU,SAAU,UAAW,WAChC,CACE,OACA,OACArB,EACAJ,YACEU,kBAAgBC,OACd,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,QACxD,CAACR,EAAcyB,EAAQE,MAAOF,EAAQG,QAASF,EAAON,EAAUK,EAAQK,YCzJ9EC,EAASC,YAAUtC,KAAK,IAAIuC,IAAI,IAIhCC,EAASF,YAAUtC,KAAK,IAAIuC,IAAI,eAGpB,SAACf,UACVrB,YAAUC,cAAYoB,IAAYN,MAAM,EAAG,iBAHjC,SAACiB,UAAwBG,YAAUtC,KAAKmC,GAAOM,IAAID,gBAJnD,SAACL,UAAwBG,YAAUtC,KAAKmC,GAAOM,IAAIJ,qCAJnD,SAACF,UAAwBO,aAAWP,EAAMb"}