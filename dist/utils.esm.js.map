{"version":3,"file":"utils.esm.js","sources":["../src/signatures.ts","../src/index.ts"],"sourcesContent":["import { keccak256, defaultAbiCoder, toUtf8Bytes, solidityPack } from 'ethers/lib/utils'\nimport { BigNumberish } from 'ethers'\nimport { ecsign } from 'ethereumjs-util'\n\n// Private keys for hardhat's mnemonic.\nexport const privateKey0 = Buffer.from('59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d', 'hex')\nexport const privateKey1 = Buffer.from('5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a', 'hex')\n\nexport const signPacked = (digest: any, privateKey: any) => {\n  const { v, r, s } = ecsign(Buffer.from(digest.slice(2), 'hex'), privateKey)\n  return '0x' + r.toString('hex') + s.toString('hex') + v.toString(16)\n}\n\nexport const sign = (digest: any, privateKey: any) => {\n  return ecsign(Buffer.from(digest.slice(2), 'hex'), privateKey)\n}\n\nexport const SIGNATURE_TYPEHASH = keccak256(\n  toUtf8Bytes('Signature(address user,address delegate,uint256 nonce,uint256 deadline)')\n)\n\nexport const PERMIT_TYPEHASH = keccak256(\n  toUtf8Bytes('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)')\n)\n\nexport const DAI_TYPEHASH = '0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb'\nexport const CHAI_SEPARATOR = '0x0b50407de9fa158c2cba01a99633329490dfd22989a150c20e8c7b4c1fb0fcc3'\n\n// Returns the EIP712 hash which should be signed by the user\n// in order to make a call to `addDelegateBySignature`\nexport function getSignatureDigest(\n  name: string,\n  address: string,\n  chainId: number,\n  signature: {\n    user: string\n    delegate: string\n  },\n  signatureCount: BigNumberish,\n  deadline: BigNumberish\n) {\n  const DOMAIN_SEPARATOR = getDomainSeparator(name, address, '1', chainId)\n  return keccak256(\n    solidityPack(\n      ['bytes1', 'bytes1', 'bytes32', 'bytes32'],\n      [\n        '0x19',\n        '0x01',\n        DOMAIN_SEPARATOR,\n        keccak256(\n          defaultAbiCoder.encode(\n            ['bytes32', 'address', 'address', 'uint256', 'uint256'],\n            [SIGNATURE_TYPEHASH, signature.user, signature.delegate, signatureCount, deadline]\n          )\n        ),\n      ]\n    )\n  )\n}\n\n// Returns the EIP712 hash which should be signed by the user\n// in order to make a call to `permit`\nexport function getPermitDigest(\n  name: string,\n  address: string,\n  version: string,\n  chainId: number,\n  approve: {\n    owner: string\n    spender: string\n    value: BigNumberish\n  },\n  nonce: BigNumberish,\n  deadline: BigNumberish\n) {\n  const DOMAIN_SEPARATOR = getDomainSeparator(name, address, version, chainId)\n  return keccak256(\n    solidityPack(\n      ['bytes1', 'bytes1', 'bytes32', 'bytes32'],\n      [\n        '0x19',\n        '0x01',\n        DOMAIN_SEPARATOR,\n        keccak256(\n          defaultAbiCoder.encode(\n            ['bytes32', 'address', 'address', 'uint256', 'uint256', 'uint256'],\n            [PERMIT_TYPEHASH, approve.owner, approve.spender, approve.value, nonce, deadline]\n          )\n        ),\n      ]\n    )\n  )\n}\n\nexport function getDaiDigest(\n  name: string,\n  address: string,\n  chainId: number,\n  approve: {\n    owner: string\n    spender: string\n    can: boolean\n  },\n  nonce: BigNumberish,\n  deadline: BigNumberish\n) {\n  const DOMAIN_SEPARATOR = getDomainSeparator(name, address, '1', chainId)\n  return keccak256(\n    solidityPack(\n      ['bytes1', 'bytes1', 'bytes32', 'bytes32'],\n      [\n        '0x19',\n        '0x01',\n        DOMAIN_SEPARATOR,\n        keccak256(\n          defaultAbiCoder.encode(\n            ['bytes32', 'address', 'address', 'uint256', 'uint256', 'bool'],\n            [DAI_TYPEHASH, approve.owner, approve.spender, nonce, deadline, approve.can]\n          )\n        ),\n      ]\n    )\n  )\n}\n\n// Gets the EIP712 domain separator\nexport function getDomainSeparator(name: string, contractAddress: string, version: string, chainId: number) {\n  return keccak256(\n    defaultAbiCoder.encode(\n      ['bytes32', 'bytes32', 'bytes32', 'uint256', 'address'],\n      [\n        keccak256(toUtf8Bytes('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')),\n        keccak256(toUtf8Bytes(name)),\n        keccak256(toUtf8Bytes(version)),\n        chainId,\n        contractAddress,\n      ]\n    )\n  )\n}\n\nexport function getChaiDigest(\n  approve: {\n    owner: string\n    spender: string\n    can: boolean\n  },\n  nonce: BigNumberish,\n  deadline: BigNumberish\n) {\n  return keccak256(\n    solidityPack(\n      ['bytes1', 'bytes1', 'bytes32', 'bytes32'],\n      [\n        '0x19',\n        '0x01',\n        CHAI_SEPARATOR,\n        keccak256(\n          defaultAbiCoder.encode(\n            ['bytes32', 'address', 'address', 'uint256', 'uint256', 'bool'],\n            [DAI_TYPEHASH, approve.owner, approve.spender, nonce, deadline, approve.can]\n          )\n        ),\n      ]\n    )\n  )\n}\n","import { BigNumber, BigNumberish } from \"ethers\"\nimport { keccak256, toUtf8Bytes, parseEther } from 'ethers/lib/utils'\n\n// 10**18 precision\nexport const wad = (value: BigNumberish) => parseEther(value.toString())\n\n// 10**27 precision\nconst rayExp = BigNumber.from(10).pow(27)\nexport const ray = (value: BigNumberish) => BigNumber.from(value).mul(rayExp)\n\n// 10**45 precision\nconst radExp = BigNumber.from(10).pow(45)\nexport const rad = (value: BigNumberish) => BigNumber.from(value).mul(radExp)\n\nexport const id = (signature: string) => {\n  return keccak256(toUtf8Bytes(signature)).slice(0, 10)\n}\n\nexport * as signatures from \"./signatures\""],"names":["privateKey0","Buffer","from","privateKey1","signPacked","digest","privateKey","ecsign","slice","v","r","s","toString","sign","SIGNATURE_TYPEHASH","keccak256","toUtf8Bytes","PERMIT_TYPEHASH","DAI_TYPEHASH","CHAI_SEPARATOR","getSignatureDigest","name","address","chainId","signature","signatureCount","deadline","DOMAIN_SEPARATOR","getDomainSeparator","solidityPack","defaultAbiCoder","encode","user","delegate","getPermitDigest","version","approve","nonce","owner","spender","value","getDaiDigest","can","contractAddress","getChaiDigest","wad","parseEther","rayExp","BigNumber","pow","ray","mul","radExp","rad","id"],"mappings":"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"}